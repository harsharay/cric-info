{"version":3,"sources":["Components/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","useState","data","setData","selected","setSelected","output","setOutput","useEffect","fetch","then","json","catch","e","console","log","message","onChange","newValue","target","value","map","item","index","key","onClick","axios","post","Object","keys","length","name","matches","innings","notOuts","span","highScore","runs","average","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"uQAgEeA,EA9DF,WAAO,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAIiBF,mBAAS,YAJ1B,mBAIRG,EAJQ,KAIEC,EAJF,OAMaJ,mBAAS,IANtB,mBAMRK,EANQ,KAMAC,EANA,KAiBfC,qBAAU,WAENC,MAAM,yDACLC,MAAK,SAAAR,GAAI,OAAIA,EAAKS,UAClBD,MAAK,SAAAC,GAAI,OAAIR,EAAQQ,MACrBC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAEG,cAC5B,IAeF,OACI,6BACI,4BAAQC,SAfa,SAAAJ,GACzB,IAAIK,EAAWL,EAAEM,OAAOC,MACxBf,EAAYa,IAagCE,MAAOhB,GAC1CF,GAAQA,EAAKmB,KAAI,SAACC,EAAKC,GAAN,OAAgB,4BAAQC,IAAKD,GAAQD,OAE3D,4BAAQG,QAZI,WAChBC,IACCC,KAAK,uDAAuD,CAAC,MAAUvB,IACvEM,MAAK,SAAAR,GAAI,OAAIK,EAAUL,EAAKA,KAAK,OACjCU,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAEG,cAQtB,gBACA,6BACAY,OAAOC,KAAKvB,GAAQwB,OAAO,EAC5B,6BACI,4BAAKxB,EAAOyB,MACZ,uCAAazB,EAAO0B,SACpB,uCAAa1B,EAAO2B,SACpB,uCAAa3B,EAAO4B,SACpB,+CAAqB5B,EAAO6B,MAC5B,6CAAmB7B,EAAO8B,WAC1B,0CAAgB9B,EAAO+B,MACvB,uCAAa/B,EAAOgC,UAGxB,mE,MC7CIC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,+CACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACL1C,QAAQ0C,MAAMA,EAAMxC,c","file":"static/js/main.44d4c0f3.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\nimport axios from \"axios\"\r\nconst Main = () => {\r\n    \r\n    const [data, setData] = useState([])\r\n\r\n    const [selected, setSelected] = useState(\"MS Dhoni\")\r\n\r\n    const [output, setOutput] = useState({})\r\n    \r\n    // const getDataFromFirebase = async () => {\r\n    //     let response = await firestore.collection('playersData').get()\r\n    //     response.forEach(item => {\r\n    //         setData(prevValue => {\r\n    //             return [...prevValue, item.data().name]\r\n    //         })\r\n    //     })\r\n    // }\r\n    \r\n    useEffect(() => {\r\n        // getDataFromFirebase()\r\n        fetch(\"https://fierce-shelf-96133.herokuapp.com/api/loadData\")\r\n        .then(data => data.json())\r\n        .then(json => setData(json))\r\n        .catch(e => console.log(e.message))\r\n    },[])\r\n\r\n    const handleSelectDropdown = e => {\r\n        let newValue = e.target.value\r\n        setSelected(newValue)\r\n    }\r\n\r\n\r\n    const handleClick = () => {\r\n        axios\r\n        .post(\"https://fierce-shelf-96133.herokuapp.com/api/getData\",{'value' : selected})\r\n        .then(data => setOutput(data.data[0]))\r\n        .catch(e => console.log(e.message))\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <select onChange={handleSelectDropdown} value={selected}>\r\n                {data && data.map((item,index) => <option key={index}>{item}</option>)}\r\n            </select>\r\n            <button onClick={handleClick}>Get the data</button>\r\n            <br />\r\n           {Object.keys(output).length>0 ?  \r\n           <div>\r\n               <h1>{output.name}</h1>\r\n               <p>Matches: {output.matches}</p>\r\n               <p>Innings: {output.innings}</p>\r\n               <p>Notouts: {output.notOuts}</p>\r\n               <p>Career timeline: {output.span}</p>\r\n               <p>Highest Score: {output.highScore}</p>\r\n               <p>Total runs: {output.runs}</p>\r\n               <p>Average: {output.average}</p>\r\n           </div>\r\n           :\r\n           <h4>Select a player from the dropdown</h4>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Main from \"./Components/Main/Main\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Cricketers Info</h1>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}